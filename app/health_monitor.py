"""
Health monitoring system - EXTENDED portfolio information for ALL accounts
"""
import logging
from typing import List
from app.settings import settings

logger = logging.getLogger(__name__)

class HealthMonitor:
    """Health monitor with extended portfolio information for ALL accounts"""
    
    def __init__(self, client_manager, telegram_bot):
        self.client_manager = client_manager
        self.telegram_bot = telegram_bot
        self.status_messages = []
    
    def _is_real_tinkoff_client(self):
        """Check if using real Tinkoff client"""
        return self.client_manager.is_real_client()
    
    async def perform_health_check(self) -> str:
        """Perform health check with extended portfolio info for ALL accounts"""
        logger.info("üîç Performing health check for ALL accounts...")
        
        self.status_messages = []
        
        # 1. Bot status
        self.status_messages.append("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # 2. Broker service check
        await self._check_broker_service()
        
        # 3. Extended portfolio data for ALL accounts
        await self._check_extended_portfolio_data_all_accounts()
        
        # 4. Trading mode and tariff info
        self._add_trading_mode_info()
        
        return self._format_health_report()
    
    async def _check_broker_service(self):
        """Check broker service"""
        try:
            if settings.TINKOFF_SANDBOX_MODE:
                mode_info = "üîß SANDBOX MODE"
            else:
                mode_info = "‚ö° REAL MODE"
            
            def get_accounts_operation(client):
                return client.users.get_accounts()
            
            accounts_response = self.client_manager.execute_operation(get_accounts_operation)
            account_count = len(accounts_response.accounts) if hasattr(accounts_response, 'accounts') else 0
            
            self.status_messages.append(f"‚úÖ –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω ({mode_info})")
            self.status_messages.append(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {account_count}")
            
        except Exception as e:
            logger.error(f"Broker check error: {e}")
            self.status_messages.append("‚ùå –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            self.status_messages.append(f"üìù –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _check_extended_portfolio_data_all_accounts(self):
        """Check extended portfolio data with detailed positions for ALL accounts"""
        try:
            def get_accounts_operation(client):
                return client.users.get_accounts()
            
            accounts_response = self.client_manager.execute_operation(get_accounts_operation)
                
            if not accounts_response.accounts:
                self.status_messages.append("üí∞ –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: –Ω–µ—Ç —Å—á–µ—Ç–æ–≤")
                return
            
            total_balance_all_accounts = 0
            total_cash_all_accounts = 0
            total_positions_count = 0
            all_positions_details = []
            sectors_all = {}
            instrument_types_all = {}
            accounts_info = []
            
            # Process each account
            for account in accounts_response.accounts:
                account_id = account.id
                account_name = getattr(account, 'name', f'–°—á–µ—Ç {account_id[-4:]}')
                account_type = getattr(account, 'type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                logger.info(f"Processing portfolio for account: {account_name}")
                
                account_balance = 0
                account_cash = 0
                account_positions_count = 0
                account_positions_details = []
                
                # Get portfolio for this account
                def get_portfolio_operation(client):
                    return client.operations.get_portfolio(account_id=account_id)
                
                portfolio = self.client_manager.execute_operation(get_portfolio_operation)
                
                # Get positions for this account
                def get_positions_operation(client):
                    return client.operations.get_positions(account_id=account_id)
                
                positions = self.client_manager.execute_operation(get_positions_operation)
                
                # Process positions for this account
                if portfolio and hasattr(portfolio, 'positions'):
                    for position in portfolio.positions:
                        try:
                            quantity = position.quantity.units if hasattr(position.quantity, 'units') else 0
                            if quantity <= 0:
                                continue
                                
                            # Get current price and value
                            current_price = 0
                            if hasattr(position, 'current_price'):
                                if hasattr(position.current_price, 'units') and hasattr(position.current_price, 'nano'):
                                    current_price = position.current_price.units + position.current_price.nano / 1e9
                            
                            position_value = current_price * quantity
                            account_balance += position_value
                            account_positions_count += 1
                            total_positions_count += 1
                            
                            # Get instrument info
                            name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            ticker = "N/A"
                            instrument_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            sector = "–î—Ä—É–≥–æ–µ"
                            
                            if hasattr(position, 'figi'):
                                try:
                                    def get_instrument_operation(instrument_client):
                                        return instrument_client.instruments.get_instrument_by(id_type=1, id=position.figi)
                                    
                                    instrument_response = self.client_manager.execute_operation(get_instrument_operation)
                                    if instrument_response and hasattr(instrument_response, 'instrument'):
                                        name = getattr(instrument_response.instrument, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                        ticker = getattr(instrument_response.instrument, 'ticker', 'N/A')
                                        instrument_type = getattr(instrument_response.instrument, 'instrument_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                        sector = self._classify_sector(ticker)
                                except Exception as e:
                                    logger.warning(f"Could not get instrument info: {e}")
                                    if hasattr(position, 'name'):
                                        name = position.name
                                    if hasattr(position, 'ticker'):
                                        ticker = position.ticker
                                    if hasattr(position, 'instrument_type'):
                                        instrument_type = position.instrument_type
                            
                            # Track sectors and instrument types for all accounts
                            if sector not in sectors_all:
                                sectors_all[sector] = 0
                            sectors_all[sector] += position_value
                            
                            if instrument_type not in instrument_types_all:
                                instrument_types_all[instrument_type] = 0
                            instrument_types_all[instrument_type] += position_value
                            
                            position_details = {
                                'name': name,
                                'ticker': ticker,
                                'type': instrument_type,
                                'quantity': quantity,
                                'value': position_value,
                                'sector': sector,
                                'account_name': account_name
                            }
                            
                            account_positions_details.append(position_details)
                            all_positions_details.append(position_details)
                            
                        except Exception as e:
                            logger.warning(f"Error processing position: {e}")
                            continue
                
                # Process cash for this account
                if positions and hasattr(positions, 'money') and positions.money:
                    for money in positions.money:
                        if hasattr(money, 'currency') and money.currency == 'rub':
                            if hasattr(money, 'units') and hasattr(money, 'nano'):
                                cash_amount = money.units + money.nano / 1e9
                            elif hasattr(money, 'units'):
                                cash_amount = money.units
                            else:
                                cash_amount = 0
                            account_cash += cash_amount
                
                account_balance += account_cash
                total_balance_all_accounts += account_balance
                total_cash_all_accounts += account_cash
                
                # Add account summary
                accounts_info.append({
                    'name': account_name,
                    'type': account_type,
                    'balance': account_balance,
                    'cash': account_cash,
                    'positions_count': account_positions_count,
                    'positions': account_positions_details
                })
            
            # Add overall portfolio summary
            self.status_messages.append(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤: {total_balance_all_accounts:,.2f} —Ä—É–±.")
            self.status_messages.append(f"üí≥ –û–±—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {total_cash_all_accounts:,.2f} —Ä—É–±.")
            self.status_messages.append(f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤–æ –≤—Å–µ—Ö —Å—á–µ—Ç–∞—Ö: {total_positions_count}")
            
            # Add accounts breakdown
            if accounts_info:
                self.status_messages.append("\nüè¶ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –°–ß–ï–¢–ê–ú:")
                for account in accounts_info:
                    account_percent = (account['balance'] / total_balance_all_accounts * 100) if total_balance_all_accounts > 0 else 0
                    account_info = f"‚Ä¢ {account['name']} ({account['type']})"
                    account_info += f" - {account['balance']:,.0f} —Ä—É–±. ({account_percent:.1f}%)"
                    account_info += f" | –ü–æ–∑–∏—Ü–∏–π: {account['positions_count']}"
                    account_info += f" | –î–µ–Ω–µ–≥: {account['cash']:,.0f} —Ä—É–±."
                    self.status_messages.append(account_info)
            
            # Add positions breakdown (top 15 across all accounts)
            if all_positions_details:
                self.status_messages.append("\nüéØ –ö–†–£–ü–ù–ï–ô–®–ò–ï –ü–û–ó–ò–¶–ò–ò (–í–°–ï –°–ß–ï–¢–ê):")
                
                # Sort by value (descending) across all accounts
                all_positions_details.sort(key=lambda x: x['value'], reverse=True)
                
                for i, pos in enumerate(all_positions_details[:15], 1):  # Show top 15 positions
                    pos_weight = (pos['value'] / total_balance_all_accounts * 100) if total_balance_all_accounts > 0 else 0
                    pos_info = f"{i}. {pos['name']} ({pos['ticker']})"
                    pos_info += f"\n   ‚îî –°—á–µ—Ç: {pos['account_name']}"
                    pos_info += f" | –ö–æ–ª-–≤–æ: {pos['quantity']:,} —à—Ç."
                    pos_info += f" | –°—Ç–æ–∏–º–æ—Å—Ç—å: {pos['value']:,.0f} —Ä—É–±."
                    pos_info += f" | –î–æ–ª—è: {pos_weight:.1f}%"
                    pos_info += f" | –¢–∏–ø: {pos['type']}"
                    pos_info += f" | –°–µ–∫—Ç–æ—Ä: {pos['sector']}"
                    self.status_messages.append(pos_info)
                
                if len(all_positions_details) > 15:
                    self.status_messages.append(f"   ... –∏ –µ—â–µ {len(all_positions_details) - 15} –ø–æ–∑–∏—Ü–∏–π")
            
            # Add sector allocation across all accounts
            if sectors_all and total_balance_all_accounts > 0:
                self.status_messages.append("\nüè¢ –û–ë–©–ï–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–ï–ö–¢–û–†–ê–ú:")
                for sector, value in sorted(sectors_all.items(), key=lambda x: x[1], reverse=True):
                    sector_percent = (value / total_balance_all_accounts * 100)
                    if sector_percent >= 1:  # Show only sectors with >1%
                        self.status_messages.append(f"   ‚Ä¢ {sector}: {sector_percent:.1f}%")
            
            # Add instrument type allocation across all accounts
            if instrument_types_all and total_balance_all_accounts > 0:
                self.status_messages.append("\nüìà –û–ë–©–ï–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:")
                for inst_type, value in sorted(instrument_types_all.items(), key=lambda x: x[1], reverse=True):
                    type_percent = (value / total_balance_all_accounts * 100)
                    if type_percent >= 1:  # Show only types with >1%
                        self.status_messages.append(f"   ‚Ä¢ {inst_type}: {type_percent:.1f}%")
            
        except Exception as e:
            logger.error(f"Portfolio check error: {e}")
            self.status_messages.append("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            self.status_messages.append(f"üìù –û—à–∏–±–∫–∞: {str(e)}")
    
    def _classify_sector(self, ticker: str) -> str:
        """Classify instrument by sector based on ticker"""
        sector_map = {
            'SBER': '–§–∏–Ω–∞–Ω—Å—ã', 'VTBR': '–§–∏–Ω–∞–Ω—Å—ã', 'TCSG': '–§–∏–Ω–∞–Ω—Å—ã',
            'GAZP': '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', 'LKOH': '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', 'ROSN': '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', 'NVTK': '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞',
            'YNDX': 'IT', 'OZON': 'IT', 'TCS': 'IT',
            'GMKN': '–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è', 'PLZL': '–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è', 'ALRS': '–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è',
            'MGNT': '–†–∏—Ç–µ–π–ª', 'FIVE': '–†–∏—Ç–µ–π–ª', 'DSKY': '–†–∏—Ç–µ–π–ª',
            'MTSS': '–¢–µ–ª–µ–∫–æ–º', 'RTKM': '–¢–µ–ª–µ–∫–æ–º',
            'PHOR': '–•–∏–º–∏—è', 'TRNFP': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
            'AFKS': '–•–æ–ª–¥–∏–Ω–≥–∏', 'RUAL': '–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è'
        }
        return sector_map.get(ticker.upper(), '–î—Ä—É–≥–æ–µ')
    
    def _add_trading_mode_info(self):
        """Add trading mode and tariff information"""
        if settings.AUTO_TRADING_MODE:
            trading_mode = "ü§ñ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô"
        else:
            trading_mode = "üë§ –° –†–£–ß–ù–´–ú –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï–ú"
        
        self.status_messages.append(f"\nüéØ –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò: {trading_mode}")
        
        # Add tariff information if available
        if hasattr(self.telegram_bot, 'tariff_manager'):
            try:
                tariff_info = self.telegram_bot.tariff_manager.get_tariff_info()
                self.status_messages.append(f"üí∞ –¢–ê–†–ò–§ –ë–†–û–ö–ï–†–ê: {tariff_info['name']}")
                self.status_messages.append(f"üìä –ö–û–ú–ò–°–°–ò–ò: –ø–æ–∫—É–ø–∫–∞ {tariff_info['commission_rates']['buy']}%, –ø—Ä–æ–¥–∞–∂–∞ {tariff_info['commission_rates']['sell']}%")
            except Exception as e:
                logger.warning(f"Could not get tariff info: {e}")
                self.status_messages.append("üí∞ –¢–ê–†–ò–§ –ë–†–û–ö–ï–†–ê: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # AI status
        if hasattr(self.telegram_bot, 'ai_manager') and self.telegram_bot.ai_manager:
            ai_info = self.telegram_bot.ai_manager.get_provider_info()
            active_provider = ai_info.get('active_provider', 'unknown')
            providers_count = ai_info.get('providers_count', 0)
            
            if active_provider != 'fallback':
                self.status_messages.append(f"ü§ñ AI –ü–†–û–í–ê–ô–î–ï–†: {active_provider.upper()} ({providers_count} –¥–æ—Å—Ç—É–ø–Ω–æ)")
            else:
                self.status_messages.append("ü§ñ AI –ü–†–û–í–ê–ô–î–ï–†: FALLBACK (–æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
        else:
            self.status_messages.append("ü§ñ AI –ü–†–û–í–ê–ô–î–ï–†: –ù–ï–î–û–°–¢–£–ü–ï–ù")
    
    def _format_health_report(self) -> str:
        """Format health report with extended information"""
        report = "ü§ñ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –û–¢–ß–ï–¢ –û –°–ò–°–¢–ï–ú–ï\n\n"
        report += "\n".join(self.status_messages)
        report += "\n\nüü¢ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï"
        
        return report
    
    async def send_health_report(self, admin_chat_id: str):
        """Send health report to admin"""
        try:
            health_report = await self.perform_health_check()
            await self.telegram_bot.application.bot.send_message(
                chat_id=admin_chat_id,
                text=health_report
            )
        except Exception as e:
            logger.error(f"Failed to send health report: {e}")