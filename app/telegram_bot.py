"""
Telegram bot for Investment Advisor with Tinkoff API integration
"""
import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from app.loader import get_tinkoff_client

logger = logging.getLogger(__name__)

class InvestmentTelegramBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.application = None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        logger.info(f"START from {user.first_name} (ID: {user.id})")
        
        welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/portfolio - –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
/accounts - –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
/help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üí¨ **–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã:**
- "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"
- "–ö–∞–∫–∏–µ –∞–∫—Ü–∏–∏ –∫—É–ø–∏—Ç—å?"
- "–ß—Ç–æ —Å —Ä—ã–Ω–∫–æ–º —Å–µ–≥–æ–¥–Ω—è?"

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /portfolio –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!
        """
        
        await update.message.reply_text(welcome_text)

    async def portfolio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /portfolio command with real Tinkoff data"""
        user = update.effective_user
        logger.info(f"PORTFOLIO from {user.first_name}")
        
        try:
            # Get Tinkoff client
            tinkoff_client = get_tinkoff_client()
            
            await update.message.reply_text("üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
            
            # Get accounts
            accounts_response = tinkoff_client.get_accounts()
            if not accounts_response.accounts:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤")
                return
            
            account_id = accounts_response.accounts[0].id
            
            # Get portfolio
            portfolio = tinkoff_client.get_portfolio(account_id)
            
            # Format portfolio info
            total_shares = portfolio.total_amount_shares.units if portfolio.total_amount_shares else 0
            total_bonds = portfolio.total_amount_bonds.units if portfolio.total_amount_bonds else 0
            total_etf = portfolio.total_amount_etf.units if portfolio.total_amount_etf else 0
            total_currencies = portfolio.total_amount_currencies.units if portfolio.total_amount_currencies else 0
            
            total_value = total_shares + total_bonds + total_etf + total_currencies
            
            portfolio_text = f"""
üìà **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:**

üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_value:,} —Ä—É–±.
‚îú‚îÄ –ê–∫—Ü–∏–∏: {total_shares:,} —Ä—É–±.
‚îú‚îÄ –û–±–ª–∏–≥–∞—Ü–∏–∏: {total_bonds:,} —Ä—É–±.
‚îú‚îÄ ETF: {total_etf:,} —Ä—É–±.
‚îî‚îÄ –í–∞–ª—é—Ç–∞: {total_currencies:,} —Ä—É–±.

üè¢ **–ü–æ–∑–∏—Ü–∏–π:** {len(portfolio.positions) if portfolio.positions else 0}

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI:**
–ü–æ—Ä—Ç—Ñ–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
            """
            
            await update.message.reply_text(portfolio_text)
            logger.info(f"Sent portfolio to {user.id}: {total_value} —Ä—É–±.")
            
        except Exception as e:
            logger.error(f"Portfolio error: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tinkoff API."
            )

    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /accounts command"""
        try:
            tinkoff_client = get_tinkoff_client()
            accounts_response = tinkoff_client.get_accounts()
            
            if not accounts_response.accounts:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤")
                return
            
            accounts_text = "üìã **–í–∞—à–∏ —Å—á–µ—Ç–∞:**\n\n"
            for i, account in enumerate(accounts_response.accounts, 1):
                accounts_text += f"{i}. {account.name or '–°—á–µ—Ç'} ({account.id[:8]}...)\n"
                if hasattr(account, 'status'):
                    accounts_text += f"   –°—Ç–∞—Ç—É—Å: {account.status}\n"
                accounts_text += "\n"
            
            await update.message.reply_text(accounts_text)
            
        except Exception as e:
            logger.error(f"Accounts error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—á–µ—Ç–æ–≤")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
üìã **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/portfolio - –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
/accounts - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí¨ **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è AI:**
‚Ä¢ "–ö–∞–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —É –º–æ–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è?"
‚Ä¢ "–ß—Ç–æ –∫—É–ø–∏—Ç—å –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏?"
‚Ä¢ "–ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ä—É–±–ª—é?"

ü§ñ **AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç** –ø–æ–º–æ–∂–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!
        """
        
        await update.message.reply_text(help_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle regular text messages with AI response"""
        user_message = update.message.text
        user = update.effective_user
        
        logger.info(f"Message from {user.first_name}: {user_message}")
        
        # Simple AI responses
        if any(word in user_message.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '—Ö–∞–π']):
            response = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! ü§ó"
        elif any(word in user_message.lower() for word in ['–ø–æ—Ä—Ç—Ñ–µ–ª—å', '–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', '–∏–Ω–≤–µ—Å—Ç–∏—Ü']):
            response = "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /portfolio üìä"
        elif any(word in user_message.lower() for word in ['—Å—á–µ—Ç', '—Å—á–µ—Ç–∞', '–∞–∫–∫–∞—É–Ω—Ç']):
            response = "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /accounts üìã"
        elif any(word in user_message.lower() for word in ['–∞–∫—Ü–∏', '–∞–∫—Ü–∏—è', 'stock']):
            response = "üìà –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /portfolio –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
        elif any(word in user_message.lower() for word in ['–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', '–ø—Ä–∏–±—ã–ª—å', '–ø—Ä–æ—Ñ–∏—Ç']):
            response = "üìä –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ /portfolio"
        elif any(word in user_message.lower() for word in ['—Å–ø–∞—Å–∏–±–æ', 'thanks', 'thank you']):
            response = "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! üöÄ"
        else:
            response = (
                f"ü§ñ AI-–∞–Ω–∞–ª–∏–∑: –í–∞—à –≤–æ–ø—Ä–æ—Å '{user_message}' –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "–ü–æ–∫–∞ —á—Ç–æ —è —É–º–µ—é:\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å (/portfolio)\n"  
                "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—á–µ—Ç–∞ (/accounts)\n"
                "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!"
            )
        
        await update.message.reply_text(response)

    def setup_handlers(self):
        """Setup all command handlers"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("portfolio", self.portfolio_command))
        self.application.add_handler(CommandHandler("accounts", self.accounts_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    def run(self):
        """Run the bot"""
        if not self.token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not set!")
            return
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        logger.info("ü§ñ Investment Advisor Bot starting...")
        print("=" * 60)
        print("ü§ñ INVESTMENT ADVISOR BOT")
        print("=" * 60)
        print("üìç –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        print("üí¨ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
        print("   /portfolio - –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è") 
        print("   /accounts - —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤")
        print("   /help - –ø–æ–º–æ—â—å")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("-" * 60)
        
        # Run polling
        self.application.run_polling(drop_pending_updates=True)

        """
Telegram bot with DeepSeek AI integration
"""
import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from app.loader import get_tinkoff_client
from app.ai_deepseek import get_deepseek_ai

logger = logging.getLogger(__name__)

class InvestmentTelegramBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.application = None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        logger.info(f"START from {user.first_name}")
        
        welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/portfolio - –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è + AI
/accounts - –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
/analysis - AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
/help - –ü–æ–º–æ—â—å

üí¨ **–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã:**
- "–°—Ç–æ–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∞—Ç—å –∞–∫—Ü–∏–∏?"
- "–ö–∞–∫ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å?"
- "–ß—Ç–æ —Å —Ä—ã–Ω–∫–æ–º —Å–µ–≥–æ–¥–Ω—è?"
        """
        
        await update.message.reply_text(welcome_text)

    async def portfolio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /portfolio command with AI analysis"""
        user = update.effective_user
        logger.info(f"PORTFOLIO from {user.first_name}")
        
        try:
            tinkoff_client = get_tinkoff_client()
            
            await update.message.reply_text("üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
            
            # Get portfolio data
            accounts_response = tinkoff_client.get_accounts()
            if not accounts_response.accounts:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤")
                return
            
            account_id = accounts_response.accounts[0].id
            portfolio = tinkoff_client.get_portfolio(account_id)
            
            # Extract portfolio data
            total_shares = portfolio.total_amount_shares.units if portfolio.total_amount_shares else 0
            total_bonds = portfolio.total_amount_bonds.units if portfolio.total_amount_bonds else 0
            total_etf = portfolio.total_amount_etf.units if portfolio.total_amount_etf else 0
            total_currencies = portfolio.total_amount_currencies.units if portfolio.total_amount_currencies else 0
            
            total_value = total_shares + total_bonds + total_etf + total_currencies
            
            # Send basic portfolio info first
            portfolio_text = f"""
üìà **–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:**

üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_value:,} —Ä—É–±.
‚îú‚îÄ –ê–∫—Ü–∏–∏: {total_shares:,} —Ä—É–±.
‚îú‚îÄ –û–±–ª–∏–≥–∞—Ü–∏–∏: {total_bonds:,} —Ä—É–±.
‚îú‚îÄ ETF: {total_etf:,} —Ä—É–±.
‚îî‚îÄ –í–∞–ª—é—Ç–∞: {total_currencies:,} —Ä—É–±.

üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é AI-–∞–Ω–∞–ª–∏–∑...
            """
            
            await update.message.reply_text(portfolio_text)
            
            # Get AI analysis
            ai_client = await get_deepseek_ai()
            
            portfolio_data = {
                'total_value': total_value,
                'stocks_value': total_shares,
                'bonds_value': total_bonds,
                'etf_value': total_etf,
                'positions_count': len(portfolio.positions) if portfolio.positions else 0
            }
            
            ai_analysis = await ai_client.analyze_portfolio(portfolio_data)
            
            # Send AI analysis
            analysis_text = f"""
üéØ **AI –ê–Ω–∞–ª–∏–∑:**

{ai_analysis}

üí° *–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω DeepSeek AI*
            """
            
            await update.message.reply_text(analysis_text)
            logger.info(f"Sent portfolio + AI analysis to {user.id}")
            
        except Exception as e:
            logger.error(f"Portfolio error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

    async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /analysis command for market analysis"""
        try:
            await update.message.reply_text("üìà –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
            
            ai_client = await get_deepseek_ai()
            market_analysis = await ai_client.get_market_analysis()
            
            analysis_text = f"""
üåç **–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:**

{market_analysis}

üí° *–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω DeepSeek AI*
            """
            
            await update.message.reply_text(analysis_text)
            
        except Exception as e:
            logger.error(f"Market analysis error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages with AI"""
        user_message = update.message.text
        user = update.effective_user
        
        logger.info(f"AI Message from {user.first_name}: {user_message}")
        
        # Simple responses for common questions
        simple_responses = {
            '–ø—Ä–∏–≤–µ—Ç': f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! ü§ó",
            'hello': f"Hello, {user.first_name}! üëã",
            '–∫–∞–∫ –¥–µ–ª–∞': "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏! üíº",
            'start': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã",
            'help': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
            '–ø–æ—Ä—Ç—Ñ–µ–ª—å': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /portfolio –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
            '–∞–Ω–∞–ª–∏–∑': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analysis –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"
        }
        
        message_lower = user_message.lower()
        for key, response in simple_responses.items():
            if key in message_lower:
                await update.message.reply_text(response)
                return
        
        # For other messages, use AI
        try:
            await update.message.reply_text("ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
            
            ai_client = await get_deepseek_ai()
            ai_response = await ai_client.generate_response(
                user_message,
                "–¢—ã - –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
            )
            
            await update.message.reply_text(f"ü§ñ {ai_response}")
            
        except Exception as e:
            logger.error(f"AI message error: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã."
            )

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (setup_handlers, run –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π