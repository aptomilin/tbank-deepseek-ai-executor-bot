from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import logging
from datetime import datetime
from typing import Dict, Any

from app.keyboards.ai_strategy_kb import (
    get_main_ai_keyboard,
    get_analysis_options_keyboard,
    get_strategy_actions_keyboard,
    get_risk_level_keyboard
)

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("ai"))
async def cmd_ai_main(message: Message, tinkoff_client):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    mode_info = []
    if tinkoff_client.is_configured:
        if tinkoff_client.use_sandbox:
            mode_info.append("üîí SANDBOX")
        else:
            mode_info.append("‚ö° REAL")
    else:
        mode_info.append("üéÆ DEMO")
    
    mode_text = " | ".join(mode_info)
    
    await message.answer(
        f"ü§ñ <b>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>\n"
        f"<i>–†–µ–∂–∏–º: {mode_text}</i>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å, –æ—Ü–µ–Ω–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é "
        "–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_ai_keyboard(),
        parse_mode="HTML"
    )

@router.message(Command("ai_analysis"))
async def cmd_ai_analysis(message: Message, ai_strategy_manager):
    """AI –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    await message.answer("ü§ñ <b>–ó–∞–ø—É—Å–∫–∞—é –≥–ª—É–±–æ–∫–∏–π AI –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è...</b>")
    
    try:
        result = await ai_strategy_manager.get_portfolio_analysis(message.from_user.id)
        
        if not result.success:
            error_msg = result.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:</b>\n{error_msg}")
            return
        
        response = _format_portfolio_analysis(result.data)
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"AI analysis error: {e}")
        await message.answer("‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è</b>")

@router.message(Command("market_analysis"))
async def cmd_market_analysis(message: Message, ai_strategy_manager):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"""
    await message.answer("üìä <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é...</b>")
    
    try:
        result = await ai_strategy_manager.get_market_analysis()
        
        if not result.success:
            error_msg = result.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            return
            
        response = _format_market_analysis(result.data)
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Market analysis error: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞</b>")

@router.message(Command("ai_strategy"))
async def cmd_ai_strategy(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
    await message.answer(
        "üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:",
        reply_markup=get_analysis_options_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "ai_full_analysis")
async def handle_full_analysis(callback: CallbackQuery, ai_strategy_manager):
    """–ü–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑"""
    await callback.message.edit_text("üîç <b>–ó–∞–ø—É—Å–∫–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑...</b>")
    
    result = await ai_strategy_manager.get_portfolio_analysis(callback.from_user.id)
    
    if not result.success:
        error_msg = result.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
        return
    
    response = _format_detailed_analysis(result.data)
    await callback.message.edit_text(
        response,
        reply_markup=get_strategy_actions_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "ai_market_analysis")
async def handle_market_analysis(callback: CallbackQuery, ai_strategy_manager):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    await callback.message.edit_text("üåê <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ—á–Ω—É—é –∫–æ–Ω—ä—é–Ω–∫—Ç—É—Ä—É...</b>")
    
    result = await ai_strategy_manager.get_market_analysis()
    
    if not result.success:
        error_msg = result.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
        return
    
    response = _format_market_analysis(result.data)
    await callback.message.edit_text(response, parse_mode="HTML")

@router.callback_query(F.data == "ai_trading_plan")
async def handle_trading_plan(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞"""
    await callback.message.edit_text(
        "‚ö° <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å:",
        reply_markup=get_risk_level_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("risk_"))
async def handle_risk_level(callback: CallbackQuery, ai_strategy_manager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è"""
    risk_level = callback.data.split("_")[1]
    
    # Validate risk level
    valid_risk_levels = ["conservative", "moderate", "aggressive"]
    if risk_level not in valid_risk_levels:
        await callback.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞")
        return
    
    await callback.message.edit_text(f"üìã <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é {risk_level} —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω...</b>")
    
    result = await ai_strategy_manager.generate_trading_plan(
        callback.from_user.id, risk_level
    )
    
    if not result.success:
        error_msg = result.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
        return
    
    response = _format_trading_plan(result.data, risk_level)
    await callback.message.edit_text(response, parse_mode="HTML")

@router.callback_query(F.data == "execute_ai_strategy")
async def handle_execute_strategy(callback: CallbackQuery, ai_strategy_manager):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    await callback.message.edit_text("‚ö° <b>–í—ã–ø–æ–ª–Ω—è—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...</b>")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analysis_result = await ai_strategy_manager.get_portfolio_analysis(callback.from_user.id)
    
    if not analysis_result.success:
        error_msg = analysis_result.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    actions = analysis_result.data.get('rebalancing_recommendations', {}).get('actions', [])
    execution_result = await ai_strategy_manager.execute_strategy_actions(
        callback.from_user.id, actions
    )
    
    response = _format_execution_result(execution_result.data, len(actions))
    await callback.message.edit_text(response, parse_mode="HTML")

@router.callback_query(F.data == "ai_main_menu")
async def handle_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "ü§ñ <b>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_ai_keyboard(),
        parse_mode="HTML"
    )

@router.message(Command("sandbox_info"))
async def cmd_sandbox_info(message: Message, tinkoff_client):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ sandbox —Ä–µ–∂–∏–º–µ"""
    if not tinkoff_client.is_configured:
        await message.answer(
            "üîí <b>Sandbox —Ä–µ–∂–∏–º</b>\n\n"
            "Tinkoff API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.\n\n"
            "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sandbox:\n"
            "1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Tinkoff\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ TINKOFF_TOKEN –≤ .env —Ñ–∞–π–ª\n"
            "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_SANDBOX=true"
        )
        return
    
    if tinkoff_client.use_sandbox:
        await message.answer(
            "üîÑ <b>Sandbox —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
            "‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ\n"
            "‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n"
            "‚úÖ –ë–µ–∑ —Ä–∏—Å–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
            "‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n\n"
            "<i>–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_SANDBOX=false –≤ .env</i>"
        )
    else:
        await message.answer(
            "‚ö° <b>–†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
            "‚ö†Ô∏è –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏\n"
            "‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–æ–≤\n"
            "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ sandbox\n\n"
            "<i>–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ sandbox —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_SANDBOX=true –≤ .env</i>"
        )

def _format_portfolio_analysis(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    portfolio_health = data.get('portfolio_health', {})
    market_analysis = data.get('market_analysis', {})
    recommendations = data.get('rebalancing_recommendations', {})
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ
    mode_info = []
    if data.get('sandbox'):
        mode_info.append("üîí SANDBOX")
    if data.get('demo_mode'):
        mode_info.append("üéÆ DEMO")
    mode_text = " | ".join(mode_info) if mode_info else "‚ö° REAL"
    
    health_scores = [
        f"‚Ä¢ –û–±—â–∏–π —Å—á–µ—Ç: {portfolio_health.get('overall_score', 0)}/100",
        f"‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {portfolio_health.get('diversification_score', 0)}/100", 
        f"‚Ä¢ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: {portfolio_health.get('risk_score', 0)}/100",
        f"‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {portfolio_health.get('liquidity_score', 0)}/100"
    ]
    
    actions = recommendations.get('actions', [])
    actions_text = "\n".join([
        f"‚Ä¢ {action.get('action', '').upper()} {action.get('ticker', '')} ({action.get('amount_percent', 0)}%)"
        for action in actions[:3]
    ]) if actions else "‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    
    return (
        f"üìä <b>AI –ê–Ω–∞–ª–∏–∑ –ü–æ—Ä—Ç—Ñ–µ–ª—è</b>\n"
        f"<i>–†–µ–∂–∏–º: {mode_text}</i>\n\n"
        f"<b>–û—Ü–µ–Ω–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:</b>\n" + "\n".join(health_scores) + f"\n\n"
        f"<b>–†—ã–Ω–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:</b>\n"
        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {market_analysis.get('current_sentiment', 'N/A')}\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {market_analysis.get('risk_level', 'N/A')}\n\n"
        f"<b>–ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{actions_text}\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}</i>"
    )

def _format_market_analysis(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ
    mode_info = []
    if data.get('sandbox'):
        mode_info.append("üîí SANDBOX")
    if data.get('demo_mode'):
        mode_info.append("üéÆ DEMO")
    mode_text = " | ".join(mode_info) if mode_info else "‚ö° REAL"
    
    key_drivers = data.get('key_drivers', [])[:3]
    recommended_actions = data.get('recommended_actions', [])[:3]
    
    return (
        f"üåê <b>AI –ê–Ω–∞–ª–∏–∑ –†—ã–Ω–∫–∞</b>\n"
        f"<i>–†–µ–∂–∏–º: {mode_text}</i>\n\n"
        f"<b>–û–±—â–∏–π –Ω–∞—Å—Ç—Ä–æ–π:</b> {data.get('market_sentiment', 'N/A').title()}\n"
        f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {data.get('confidence_level', 0) * 100:.1f}%\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {data.get('risk_assessment', 'N/A')}\n\n"
        f"<b>–ö–ª—é—á–µ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã:</b>\n" +
        "\n".join([f"‚Ä¢ {driver}" for driver in key_drivers]) + f"\n\n"
        f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n" +
        "\n".join([f"‚Ä¢ {action}" for action in recommended_actions]) + f"\n\n"
        f"<i>–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {datetime.now().strftime('%H:%M %d.%m.%Y')}</i>"
    )

def _format_detailed_analysis(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    portfolio_health = data.get('portfolio_health', {})
    recommendations = data.get('rebalancing_recommendations', {})
    target_alloc = recommendations.get('target_allocation', {})
    
    actions = recommendations.get('actions', [])
    high_priority_actions = [a for a in actions if a.get('urgency') == 'high']
    
    actions_text = "\n".join([
        f"‚Ä¢ {action.get('action', '').upper()} {action.get('ticker', '')} - {action.get('reason', '')}"
        for action in high_priority_actions[:5]
    ]) if high_priority_actions else "‚Ä¢ –°—Ä–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    
    return (
        f"üîç <b>–î–µ—Ç–∞–ª—å–Ω—ã–π AI –ê–Ω–∞–ª–∏–∑</b>\n\n"
        f"<b>–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Ä—Ç—Ñ–µ–ª—è:</b> {portfolio_health.get('overall_score', 0)}/100\n"
        f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:</b> {recommendations.get('priority', 'low')}\n\n"
        f"<b>–¶–µ–ª–µ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n"
        f"‚Ä¢ –ê–∫—Ü–∏–∏: {target_alloc.get('stocks', 0)}%\n"
        f"‚Ä¢ –û–±–ª–∏–≥–∞—Ü–∏–∏: {target_alloc.get('bonds', 0)}%\n"
        f"‚Ä¢ –ö—ç—à: {target_alloc.get('cash', 0)}%\n\n"
        f"<b>–°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n{actions_text}\n\n"
        f"<i>–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'</i>"
    )

def _format_trading_plan(data: Dict[str, Any], risk_level: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞"""
    recommendations = data.get('rebalancing_recommendations', {})
    actions = recommendations.get('actions', [])
    
    actions_text = "\n".join([
        f"‚Ä¢ {action.get('action', '').upper()} {action.get('ticker', '')} ({action.get('amount_percent', 0)}%)"
        for action in actions[:6]
    ]) if actions else "‚Ä¢ –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è"
    
    target_alloc = recommendations.get('target_allocation', {})
    
    return (
        f"üéØ <b>–¢–æ—Ä–≥–æ–≤—ã–π –ü–ª–∞–Ω ({risk_level.title()})</b>\n\n"
        f"<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n{actions_text}\n\n"
        f"<b>–¶–µ–ª–µ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n"
        f"‚Ä¢ –ê–∫—Ü–∏–∏: {target_alloc.get('stocks', 0)}%\n"
        f"‚Ä¢ –û–±–ª–∏–≥–∞—Ü–∏–∏: {target_alloc.get('bonds', 0)}%\n"
        f"‚Ä¢ –ö—ç—à: {target_alloc.get('cash', 0)}%\n\n"
        f"<i>–ü–ª–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y')}</i>"
    )

def _format_execution_result(data: Dict[str, Any], total_recommendations: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    executed = data.get('executed_actions', [])
    executed_count = len(executed)
    
    executed_text = "\n".join([
        f"‚Ä¢ {action.get('action', '')} {action.get('ticker', '')} - {action.get('status', '')}"
        for action in executed[:3]
    ]) if executed else "‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å (—Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞)"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    mode_info = "–°–∏–º—É–ª—è—Ü–∏—è"
    for action in executed:
        if action.get('sandbox'):
            mode_info = "SANDBOX"
            break
        elif not action.get('simulated', True):
            mode_info = "REAL"
            break
    
    return (
        f"‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è –°—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>\n"
        f"<i>–†–µ–∂–∏–º: {mode_info}</i>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
        f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {total_recommendations}\n"
        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {executed_count}\n\n"
        f"<b>–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{executed_text}\n\n"
        f"<i>–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}</i>"
    )