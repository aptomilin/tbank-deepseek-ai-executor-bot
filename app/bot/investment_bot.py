import logging
import aiohttp
import json
from decimal import Decimal
from typing import Optional, Dict, List

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

from app.settings import settings

logger = logging.getLogger(__name__)

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PortfolioAnalyzer –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
try:
    from services.ai_strategy.portfolio_analyzer import PortfolioAnalyzer
    EXTERNAL_ANALYZER = True
except ImportError:
    logger.warning("External PortfolioAnalyzer not found, using built-in")
    EXTERNAL_ANALYZER = False
    
    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–∫ fallback
    class PortfolioAnalyzer:
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""

        def __init__(self, config):
            self.config = config
            self.portfolio_data = self._get_current_portfolio()

        def _get_current_portfolio(self) -> Dict:
            """–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
            return {
                "total_value": Decimal("185000.00"),
                "total_yield": Decimal("15600.00"), 
                "yield_percentage": Decimal("9.2"),
                "available_cash": Decimal("32000.00"),
                "positions": [
                    {"name": "–°–±–µ—Ä–±–∞–Ω–∫", "ticker": "SBER", "value": Decimal("52000.00"), 
                     "yield": Decimal("3800.00"), "percentage": Decimal("8.1"), "type": "stock", "sector": "—Ñ–∏–Ω–∞–Ω—Å—ã"},
                    {"name": "–ì–∞–∑–ø—Ä–æ–º", "ticker": "GAZP", "value": Decimal("41000.00"), 
                     "yield": Decimal("2200.00"), "percentage": Decimal("5.7"), "type": "stock", "sector": "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
                    {"name": "–õ—É–∫–æ–π–ª", "ticker": "LKOH", "value": Decimal("38000.00"), 
                     "yield": Decimal("4500.00"), "percentage": Decimal("13.8"), "type": "stock", "sector": "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
                    {"name": "–Ø–Ω–¥–µ–∫—Å", "ticker": "YNDX", "value": Decimal("22000.00"), 
                     "yield": Decimal("3100.00"), "percentage": Decimal("16.8"), "type": "stock", "sector": "IT"},
                    {"name": "–û–§–ó-26238", "ticker": "SU26238", "value": Decimal("40000.00"), 
                     "yield": Decimal("2000.00"), "percentage": Decimal("5.3"), "type": "bond", "sector": "–≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–∏"},
                ]
            }

        async def get_portfolio_analysis(self) -> str:
            return self._format_portfolio_analysis(self.portfolio_data)

        async def get_portfolio_context(self) -> str:
            return self._format_portfolio_context(self.portfolio_data)

        async def get_auto_management_recommendations(self) -> str:
            return self._generate_management_recommendations(self.portfolio_data)

        def _format_portfolio_analysis(self, data: Dict) -> str:
            text = "üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)**\n\n"
            text += f"üíº **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {data['total_value']:,.2f} ‚ÇΩ\n"
            text += f"üìà **–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {data['total_yield']:+,.2f} ‚ÇΩ ({data['yield_percentage']:+.1f}%)\n"
            text += f"üí≥ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:** {data['available_cash']:,.2f} ‚ÇΩ\n\n"

            allocation = self._analyze_allocation(data['positions'])
            text += "**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**\n"
            for asset_type, percentage in allocation.items():
                text += f"‚Ä¢ {asset_type}: {percentage:.1f}%\n"

            text += "\n**–ü–æ–∑–∏—Ü–∏–∏:**\n"
            for position in data['positions']:
                text += f"‚Ä¢ {position['name']} ({position['ticker']}): {position['value']:,.0f} ‚ÇΩ "
                text += f"({position['yield']:+,.0f} ‚ÇΩ, {position['percentage']:+.1f}%)\n"

            text += "\nüá∑üá∫ *–ê–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*"
            return text

        def _format_portfolio_context(self, data: Dict) -> str:
            context = "–î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–†–¢–§–ï–õ–Ø:\n\n"
            context += f"–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {data['total_value']:,.0f} ‚ÇΩ\n"
            context += f"–î–û–•–û–î–ù–û–°–¢–¨: {data['total_yield']:+,.0f} ‚ÇΩ ({data['yield_percentage']:+.1f}%)\n"
            context += f"–î–û–°–¢–£–ü–ù–´–ï –°–†–ï–î–°–¢–í–ê: {data['available_cash']:,.0f} ‚ÇΩ\n\n"

            context += "–¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò:\n"
            for position in data['positions']:
                context += f"- {position['name']} ({position['ticker']}): {position['value']:,.0f} ‚ÇΩ "
                context += f"(–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {position['percentage']:+.1f}%, —Å–µ–∫—Ç–æ—Ä: {position['sector']})\n"

            allocation = self._analyze_allocation(data['positions'])
            context += f"\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–û–í:\n"
            for asset_type, percentage in allocation.items():
                context += f"- {asset_type}: {percentage:.1f}%\n"

            sector_allocation = self._analyze_sectors(data['positions'])
            context += f"\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–ï–ö–¢–û–†–ê–ú:\n"
            for sector, percentage in sector_allocation.items():
                context += f"- {sector}: {percentage:.1f}%\n"

            return context

        def _generate_management_recommendations(self, data: Dict) -> str:
            analysis = self._analyze_portfolio_for_management(data)
            
            text = "ü§ñ **–ê–ù–ê–õ–ò–ó –î–õ–Ø –ê–í–¢–û–£–ü–†–ê–í–õ–ï–ù–ò–Ø**\n\n"
            
            text += "üìà **–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:**\n"
            text += f"‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {data['yield_percentage']:+.1f}%\n"
            text += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {data['available_cash']:,.0f} ‚ÇΩ\n"
            text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(data['positions'])}\n\n"

            text += "üí° **–í–´–Ø–í–õ–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**\n"
            for opportunity in analysis['opportunities']:
                text += f"‚Ä¢ {opportunity}\n"

            text += "\n‚ö° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
            for i, recommendation in enumerate(analysis['recommendations'], 1):
                text += f"{i}. {recommendation}\n"

            text += f"\nüíé **–û–ñ–ò–î–ê–ï–ú–´–ô –≠–§–§–ï–ö–¢:** {analysis['expected_improvement']}"
            text += "\n\nüá∑üá∫ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*"
            
            return text

        def _analyze_allocation(self, positions: List[Dict]) -> Dict[str, float]:
            allocation = {}
            total_value = sum(pos['value'] for pos in positions)
            
            for position in positions:
                asset_type = "–ê–∫—Ü–∏–∏" if position['type'] == 'stock' else "–û–±–ª–∏–≥–∞—Ü–∏–∏"
                if asset_type not in allocation:
                    allocation[asset_type] = 0
                allocation[asset_type] += float((position['value'] / total_value * 100))
                
            return allocation

        def _analyze_sectors(self, positions: List[Dict]) -> Dict[str, float]:
            sectors = {}
            total_value = sum(pos['value'] for pos in positions)
            
            for position in positions:
                sector = position['sector']
                if sector not in sectors:
                    sectors[sector] = 0
                sectors[sector] += float((position['value'] / total_value * 100))
                
            return sectors

        def _analyze_portfolio_for_management(self, data: Dict) -> Dict:
            opportunities = []
            recommendations = []
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            if data['yield_percentage'] < 10:
                opportunities.append("–ù–∏–∑–∫–∞—è –æ–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–ª—é –≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã—Ö –∞–∫—Ü–∏–π (YNDX, TCSG, GMKN)")

            # –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            sectors = self._analyze_sectors(data['positions'])
            if sectors.get('—Ñ–∏–Ω–∞–Ω—Å—ã', 0) > 40:
                opportunities.append("–í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º —Å–µ–∫—Ç–æ—Ä–µ")
                recommendations.append("–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤ IT –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å (POLY, PHOR)")

            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            if data['available_cash'] > data['total_value'] * 0.15:
                opportunities.append("–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞")
                recommendations.append("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å 70% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∞–∫—Ü–∏–∏ —Ä–æ—Å—Ç–∞")

            # –ê–Ω–∞–ª–∏–∑ –æ–±–ª–∏–≥–∞—Ü–∏–π
            allocation = self._analyze_allocation(data['positions'])
            if allocation.get('–û–±–ª–∏–≥–∞—Ü–∏–∏', 0) < 20:
                opportunities.append("–ù–∏–∑–∫–∞—è –¥–æ–ª—è –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤")
                recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –û–§–ó-26230 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

            expected_improvement = "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ 2-3% –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
            
            return {
                'opportunities': opportunities,
                'recommendations': recommendations,
                'expected_improvement': expected_improvement
            }


class DeepSeekAI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek AI API"""
    
    def __init__(self, config):
        self.api_key = config.DEEPSEEK_API_KEY
        self.api_url = config.DEEPSEEK_API_URL
        self.openrouter_api_key = config.OPENROUTER_API_KEY
        self.openrouter_api_url = config.OPENROUTER_API_URL
    
    async def get_investment_advice(self, user_message: str, portfolio_context: str = "") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            if self.api_key:
                response = await self._make_deepseek_request(user_message, portfolio_context)
                if response:
                    return response
            
            if self.openrouter_api_key:
                response = await self._make_openrouter_request(user_message, portfolio_context)
                if response:
                    return response
            
            return self._get_fallback_response(user_message, portfolio_context)
            
        except Exception as e:
            logger.error(f"AI request error: {e}")
            return self._get_error_response()
    
    async def _make_deepseek_request(self, user_message: str, portfolio_context: str) -> Optional[str]:
        """–ó–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        full_prompt = self._create_user_prompt(user_message, portfolio_context)
        
        payload = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system",
                    "content": self._get_system_prompt()
                },
                {
                    "role": "user",
                    "content": full_prompt
                }
            ],
            "max_tokens": 2000,
            "temperature": 0.8,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            "stream": False
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.api_url}/chat/completions",
                    json=payload,
                    headers=headers
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–π
                        if self._is_generic_response(content):
                            return self._get_analyzed_response(user_message, portfolio_context)
                        return content
                    else:
                        logger.error(f"DeepSeek API error: {response.status}")
                        return self._get_analyzed_response(user_message, portfolio_context)
        except Exception as e:
            logger.error(f"DeepSeek request failed: {e}")
            return self._get_analyzed_response(user_message, portfolio_context)
    
    async def _make_openrouter_request(self, user_message: str, portfolio_context: str) -> Optional[str]:
        """–ó–∞–ø—Ä–æ—Å –∫ OpenRouter API"""
        headers = {
            "Authorization": f"Bearer {self.openrouter_api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/aptomilin/tbank-deepseek-ai-executor-bot",
            "X-Title": "Investment Advisor Bot"
        }
        
        full_prompt = self._create_user_prompt(user_message, portfolio_context)
        
        payload = {
            "model": "deepseek/deepseek-chat",
            "messages": [
                {
                    "role": "system",
                    "content": self._get_system_prompt()
                },
                {
                    "role": "user",
                    "content": full_prompt
                }
            ],
            "max_tokens": 2000,
            "temperature": 0.8
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.openrouter_api_url}/chat/completions",
                    json=payload,
                    headers=headers
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']
                        if self._is_generic_response(content):
                            return self._get_analyzed_response(user_message, portfolio_context)
                        return content
                    else:
                        logger.error(f"OpenRouter API error: {response.status}")
                        return self._get_analyzed_response(user_message, portfolio_context)
        except Exception as e:
            logger.error(f"OpenRouter request failed: {e}")
            return self._get_analyzed_response(user_message, portfolio_context)
    
    def _create_user_prompt(self, user_message: str, portfolio_context: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        prompt = f"–ö–û–ù–ö–†–ï–¢–ù–´–ô –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_message}\n\n"
        
        if portfolio_context:
            prompt += f"–ê–ö–¢–£–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–†–¢–§–ï–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n{portfolio_context}\n\n"
        
        prompt += """–ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï –ò –î–ê–ô–¢–ï –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:

1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
2. –í—ã—è–≤–∏—Ç–µ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è  
3. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—É–º–º –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
4. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
5. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞

–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ö–û–ù–ö–†–ï–¢–ù–´–ú –ò –û–°–ù–û–í–ê–ù–ù–´–ú –ù–ê –î–ê–ù–ù–´–• –í–´–®–ï!"""
        return prompt
    
    def _get_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""
        return """–¢—ã - –≤–µ–¥—É—â–∏–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª—è —á–µ—Ä–µ–∑ Tinkoff API.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –î–∞–≤–∞—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ï, –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ê–ù–ê–õ–ò–ó–ò–†–£–ô —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤—ã—à–µ
2. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–ª–∏ –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
3. –î–ê–í–ê–ô –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ü–∏—Ñ—Ä—ã: —Å—É–º–º—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —Ç–∏–∫–µ—Ä—ã
4. –ü–†–ï–î–õ–ê–ì–ê–ô –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: "–∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å X –Ω–∞ Y —Ä—É–±–ª–µ–π"
5. –†–ê–°–°–ß–ò–¢–´–í–ê–ô –æ–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç
6. –£–ß–ò–¢–´–í–ê–ô –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏

–ó–ê–ü–†–ï–©–ï–ù–û:
- –î–∞–≤–∞—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥–∞–Ω–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è

–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ Markdown. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ–Ω!"""
    
    def _is_generic_response(self, response: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —à–∞–±–ª–æ–Ω–Ω—ã–º"""
        generic_phrases = [
            "–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å",
            "—Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∞–∫—Ç–∏–≤–æ–≤", 
            "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è",
            "–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
            "–∞–∫—Ü–∏–∏ —Ä–æ—Å—Ç–∞",
            "–¥–∏–≤–∏–¥–µ–Ω–¥–Ω—ã–µ –∞–∫—Ü–∏–∏",
            "–æ–±–ª–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"
        ]
        response_lower = response.lower()
        return any(phrase in response_lower for phrase in generic_phrases)
    
    def _get_analyzed_response(self, user_message: str, portfolio_context: str) -> str:
        """–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ AI –≤—ã–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
        if "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å" in user_message.lower() or "–ø—Ä–∏–±—ã–ª—å" in user_message.lower():
            return """üìä **–ê–ù–ê–õ–ò–ó –î–û–•–û–î–ù–û–°–¢–ò –ü–û–†–¢–§–ï–õ–Ø**

–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

üí∞ **–¢–ï–ö–£–©–ê–Ø –î–û–•–û–î–ù–û–°–¢–¨:** +9.2% (+15,600 ‚ÇΩ)
üéØ **–¶–ï–õ–ï–í–ê–Ø –î–û–•–û–î–ù–û–°–¢–¨:** +12-15%

‚ö° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–û–°–¢–ê –î–û–•–û–î–ù–û–°–¢–ò:**

1. **–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ YNDX** +15,000 ‚ÇΩ
   - –¢–µ–∫—É—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: +16.8%
   - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞: +20-25%
   - –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: +1.2% –∫ –æ–±—â–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏

2. **–î–æ–±–∞–≤–∏—Ç—å TCSG** +10,000 ‚ÇΩ  
   - IT-—Å–µ–∫—Ç–æ—Ä, –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
   - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +18-22%
   - –≠—Ñ—Ñ–µ–∫—Ç: +0.8% –∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏

3. **–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É**
   - –°–Ω–∏–∑–∏—Ç—å GAZP –Ω–∞ 8,000 ‚ÇΩ (–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 5.7%)
   - –£–≤–µ–ª–∏—á–∏—Ç—å LKOH –Ω–∞ 8,000 ‚ÇΩ (–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 13.8%)

üíé **–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:** +2-3% –∫ –æ–±—â–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–¥–æ +12-15%)"""

        elif "–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü" in user_message.lower() or "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω" in user_message.lower():
            return """üîÑ **–ê–ù–ê–õ–ò–ó –î–ò–í–ï–†–°–ò–§–ò–ö–ê–¶–ò–ò**

–¢–ï–ö–£–©–ï–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:
‚Ä¢ –§–∏–Ω–∞–Ω—Å—ã (SBER): 28.1% - –í–´–°–û–ö–ê–Ø –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø
‚Ä¢ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ (GAZP+LKOH): 42.7% - –û–ß–ï–ù–¨ –í–´–°–û–ö–ê–Ø
‚Ä¢ IT (YNDX): 11.9% - –ù–û–†–ú–ê
‚Ä¢ –û–±–ª–∏–≥–∞—Ü–∏–∏: 21.6% - –ù–û–†–ú–ê

üéØ **–û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:**
‚Ä¢ –§–∏–Ω–∞–Ω—Å—ã: 20-25%
‚Ä¢ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞: 25-30% 
‚Ä¢ IT: 15-20%
‚Ä¢ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å: 10-15%
‚Ä¢ –û–±–ª–∏–≥–∞—Ü–∏–∏: 20-25%

‚ö° **–ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:**

1. **–°–Ω–∏–∑–∏—Ç—å —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –Ω–∞ 12%** (-22,000 ‚ÇΩ)
   - –ü—Ä–æ–¥–∞—Ç—å GAZP: 12,000 ‚ÇΩ
   - –ü—Ä–æ–¥–∞—Ç—å LKOH: 10,000 ‚ÇΩ

2. **–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å** +15,000 ‚ÇΩ
   - GMKN (–ù–æ—Ä–Ω–∏–∫–µ–ª—å): 8,000 ‚ÇΩ - –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è
   - POLY (–ü–æ–ª–∏–º–µ—Ç–∞–ª–ª): 7,000 ‚ÇΩ - –¥–æ–±—ã—á–∞

3. **–£–≤–µ–ª–∏—á–∏—Ç—å IT** +7,000 ‚ÇΩ
   - TCSG: 7,000 ‚ÇΩ - —Ñ–∏–Ω—Ç–µ—Ö

üíé **–†–ï–ó–£–õ–¨–¢–ê–¢:** –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –Ω–∞ 25%, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""

        else:
            return """ü§ñ **–ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó**

–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 185,000 ‚ÇΩ:

üìà **–°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:**
‚Ä¢ –í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å YNDX (+16.8%)
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã LKOH (+13.8%) 
‚Ä¢ –ó–∞—â–∏—Ç–∞ —á–µ—Ä–µ–∑ –û–§–ó

‚ö†Ô∏è **–ó–û–ù–´ –†–û–°–¢–ê:**
‚Ä¢ –ò–∑–±—ã—Ç–æ–∫ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ (42.7%) - —Ä–∏—Å–∫ —Å–µ–∫—Ç–æ—Ä–∞
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ IT (11.9%) - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
‚Ä¢ –ù–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (GMKN, POLY) - –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è

üéØ **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:**

1. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏** 
   - –°–Ω–∏–∑–∏—Ç—å –¥–æ–ª—é –¥–æ 30% (-23,000 ‚ÇΩ)
   - –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ IT –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å

2. **–£—Å–∏–ª–µ–Ω–∏–µ IT-—Å–µ–∫—Ç–æ—Ä–∞**
   - –î–æ–±–∞–≤–∏—Ç—å TCSG +15,000 ‚ÇΩ
   - –î–æ–≤–µ—Å—Ç–∏ –¥–æ–ª—é –¥–æ 20%

3. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤** 
   - GMKN +10,000 ‚ÇΩ (–º–µ—Ç–∞–ª–ª—ã)
   - POLY +8,000 ‚ÇΩ (–∑–æ–ª–æ—Ç–æ)

üíé **–û–ñ–ò–î–ê–ù–ò–Ø:** –†–æ—Å—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–æ 12% –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ä–∏—Å–∫–æ–≤"""
    
    def _get_fallback_response(self, user_message: str, portfolio_context: str) -> str:
        """–ó–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç"""
        return self._get_analyzed_response(user_message, portfolio_context)
    
    def _get_error_response(self) -> str:
        """–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return """‚ùå **–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏**

–ü–æ–∫–∞ AI —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

üí° **–ö–ª—é—á–µ–≤—ã–µ insights –ø–æ –≤–∞—à–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é:**
‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 185,000 ‚ÇΩ
‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: +9.2% 
‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –¥—Ä–∞–π–≤–µ—Ä: YNDX (+16.8%)
‚Ä¢ –ó–æ–Ω–∞ —Ä–æ—Å—Ç–∞: IT-—Å–µ–∫—Ç–æ—Ä (—Ç–µ–∫—É—â–∞—è –¥–æ–ª—è 11.9%)

‚ö° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞:**
1. –£–≤–µ–ª–∏—á–µ–Ω–∏–∏ –¥–æ–ª–∏ IT –¥–æ 20%
2. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—â–∏—Ç–Ω–æ–π –¥–æ–ª–∏ –æ–±–ª–∏–≥–∞—Ü–∏–π

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /manage –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∞–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—é."""


class InvestmentTelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞."""

    def __init__(self, config):
        if not config.TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN is required!")

        self.config = config
        self.application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        self.ai_service = DeepSeekAI(config)
        self.portfolio_analyzer = PortfolioAnalyzer(config)

        self._register_handlers()
        logger.info("ü§ñ Investment Telegram Bot initialized")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("portfolio", self.portfolio_command))
        self.application.add_handler(CommandHandler("analytics", self.analytics_command))
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        self.application.add_handler(CommandHandler("advice", self.advice_command))
        self.application.add_handler(CommandHandler("manage", self.manage_command))

        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ Starting Telegram bot polling...")
        self.application.run_polling()

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø - AI –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ —Å –∞–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º.\n"
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "üìä /portfolio - –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"
            "ü§ñ /advice - AI-—Å–æ–≤–µ—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º\n"  
            "‚ö° /manage - –ê–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º\n"
            "üí° /help - –ü–æ–º–æ—â—å\n\n"
            "üá∑üá∫ *–¢–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*"
        )

        keyboard = [
            [KeyboardButton("/portfolio"), KeyboardButton("/advice")],
            [KeyboardButton("/manage"), KeyboardButton("/help")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n"
            "*/start* - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "*/portfolio* - –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n" 
            "*/advice* - AI-—Å–æ–≤–µ—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º\n"
            "*/manage* - –ê–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º\n"
            "*/help* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:**\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n"
            "üá∑üá∫ *–§–æ–∫—É—Å –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ –∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏*"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def portfolio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio"""
        try:
            portfolio_info = await self.portfolio_analyzer.get_portfolio_analysis()
            await update.message.reply_text(portfolio_info, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in portfolio command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

    async def analytics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics"""
        try:
            portfolio_info = await self.portfolio_analyzer.get_portfolio_analysis()
            await update.message.reply_text(portfolio_info, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in analytics command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        try:
            portfolio_info = await self.portfolio_analyzer.get_portfolio_analysis()
            await update.message.reply_text(portfolio_info, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in balance command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

    async def advice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /advice"""
        await update.message.reply_text(
            "ü§ñ **AI-—Å–æ–≤–µ—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n"
            "‚Ä¢ '–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å?'\n"
            "‚Ä¢ '–ö–∞–∫–∏–µ –∞–∫—Ü–∏–∏ –∫—É–ø–∏—Ç—å –Ω–∞ 50 000 ‚ÇΩ?'\n"  
            "‚Ä¢ '–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ?'\n"
            "‚Ä¢ '–°—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –ì–∞–∑–ø—Ä–æ–º?'\n\n"
            "üá∑üá∫ *–ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è!*"
        )

    async def manage_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manage - –∞–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º"""
        try:
            recommendations = await self.portfolio_analyzer.get_auto_management_recommendations()
            await update.message.reply_text(recommendations, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in manage command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é")

    async def _get_portfolio_context(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è AI"""
        try:
            return await self.portfolio_analyzer.get_portfolio_context()
        except Exception as e:
            logger.error(f"Error getting portfolio context: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—É–¥—É—Ç –æ–±—â–∏–º–∏."

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º"""
        user_message = update.message.text
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        if user_message.startswith('/'):
            return
            
        await update.message.reply_chat_action("typing")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_context = await self._get_portfolio_context()
            
            # –ü–æ–ª—É—á–∞–µ–º AI-–æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª—è
            ai_response = await self.ai_service.get_investment_advice(user_message, portfolio_context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Ä–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
            if len(ai_response) > 4000:
                parts = [ai_response[i:i+4000] for i in range(0, len(ai_response), 4000)]
                for part in parts:
                    await update.message.reply_text(part, parse_mode='Markdown')
            else:
                await update.message.reply_text(ai_response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in AI message handling: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é."
            )