import logging
from decimal import Decimal
from typing import Dict, List, Optional
import aiohttp
import json

logger = logging.getLogger(__name__)


class PortfolioAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""

    def __init__(self, config):
        self.config = config
        self.russian_instruments = self._load_russian_instruments()

    def _load_russian_instruments(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        return {
            "stocks": {
                "SBER": {"name": "–°–±–µ—Ä–±–∞–Ω–∫", "sector": "–§–∏–Ω–∞–Ω—Å—ã", "risk": "—Å—Ä–µ–¥–Ω–∏–π"},
                "VTBR": {"name": "–í–¢–ë", "sector": "–§–∏–Ω–∞–Ω—Å—ã", "risk": "—Å—Ä–µ–¥–Ω–∏–π"},
                "GAZP": {"name": "–ì–∞–∑–ø—Ä–æ–º", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "risk": "–Ω–∏–∑–∫–∏–π"},
                "LKOH": {"name": "–õ—É–∫–æ–π–ª", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "risk": "–Ω–∏–∑–∫–∏–π"},
                "ROSN": {"name": "–†–æ—Å–Ω–µ—Ñ—Ç—å", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "risk": "—Å—Ä–µ–¥–Ω–∏–π"},
                "NVTK": {"name": "–ù–æ–≤–∞—Ç—ç–∫", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "risk": "—Å—Ä–µ–¥–Ω–∏–π"},
                "GMKN": {"name": "–ì–ú–ö –ù–æ—Ä–Ω–∏–∫–µ–ª—å", "sector": "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è", "risk": "–≤—ã—Å–æ–∫–∏–π"},
                "PLZL": {"name": "–ü–æ–ª—é—Å", "sector": "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è", "risk": "–≤—ã—Å–æ–∫–∏–π"},
                "YNDX": {"name": "–Ø–Ω–¥–µ–∫—Å", "sector": "IT", "risk": "–≤—ã—Å–æ–∫–∏–π"},
                "TCSG": {"name": "TCS Group", "sector": "–§–∏–Ω–∞–Ω—Å—ã", "risk": "–≤—ã—Å–æ–∫–∏–π"},
                "MOEX": {"name": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞", "sector": "–§–∏–Ω–∞–Ω—Å—ã", "risk": "—Å—Ä–µ–¥–Ω–∏–π"},
                "MGNT": {"name": "–ú–∞–≥–Ω–∏—Ç", "sector": "–†–∏—Ç–µ–π–ª", "risk": "—Å—Ä–µ–¥–Ω–∏–π"},
            },
            "bonds": {
                "SU26230": {"name": "–û–§–ó-26230", "yield": 8.5, "risk": "–Ω–∏–∑–∫–∏–π"},
                "SU26238": {"name": "–û–§–ó-26238", "yield": 8.2, "risk": "–Ω–∏–∑–∫–∏–π"},
                "SU26242": {"name": "–û–§–ó-26242", "yield": 8.0, "risk": "–Ω–∏–∑–∫–∏–π"},
            }
        }

    async def get_portfolio_analysis(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        try:
            portfolio_data = await self._get_portfolio_data()
            return self._format_portfolio_analysis(portfolio_data)
        except Exception as e:
            logger.error(f"Error analyzing portfolio: {e}")
            return self._get_fallback_analysis()

    async def get_portfolio_context(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è AI"""
        try:
            portfolio_data = await self._get_portfolio_data()
            return self._format_portfolio_context(portfolio_data)
        except Exception as e:
            logger.error(f"Error getting portfolio context: {e}")
            return self._get_fallback_context()

    async def get_auto_management_recommendations(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º"""
        try:
            portfolio_data = await self._get_portfolio_data()
            return await self._generate_management_recommendations(portfolio_data)
        except Exception as e:
            logger.error(f"Error generating management recommendations: {e}")
            return self._get_fallback_management_recommendations()

    async def _get_portfolio_data(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        return {
            "total_value": Decimal("185000.00"),
            "total_yield": Decimal("15600.00"),
            "yield_percentage": Decimal("9.2"),
            "available_cash": Decimal("32000.00"),
            "positions": [
                {"name": "–°–±–µ—Ä–±–∞–Ω–∫", "ticker": "SBER", "value": Decimal("52000.00"), 
                 "yield": Decimal("3800.00"), "percentage": Decimal("8.1"), "type": "stock", "sector": "—Ñ–∏–Ω–∞–Ω—Å—ã"},
                {"name": "–ì–∞–∑–ø—Ä–æ–º", "ticker": "GAZP", "value": Decimal("41000.00"), 
                 "yield": Decimal("2200.00"), "percentage": Decimal("5.7"), "type": "stock", "sector": "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
                {"name": "–õ—É–∫–æ–π–ª", "ticker": "LKOH", "value": Decimal("38000.00"), 
                 "yield": Decimal("4500.00"), "percentage": Decimal("13.8"), "type": "stock", "sector": "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
                {"name": "–Ø–Ω–¥–µ–∫—Å", "ticker": "YNDX", "value": Decimal("22000.00"), 
                 "yield": Decimal("3100.00"), "percentage": Decimal("16.8"), "type": "stock", "sector": "IT"},
                {"name": "–û–§–ó-26238", "ticker": "SU26238", "value": Decimal("40000.00"), 
                 "yield": Decimal("2000.00"), "percentage": Decimal("5.3"), "type": "bond", "sector": "–≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–∏"},
            ]
        }

    def _format_portfolio_analysis(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        text = "üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)**\n\n"
        text += f"üíº **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {data['total_value']:,.2f} ‚ÇΩ\n"
        text += f"üìà **–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {data['total_yield']:+,.2f} ‚ÇΩ ({data['yield_percentage']:+.1f}%)\n"
        text += f"üí≥ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:** {data['available_cash']:,.2f} ‚ÇΩ\n\n"

        allocation = self._analyze_allocation(data['positions'])
        text += "**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**\n"
        for asset_type, percentage in allocation.items():
            text += f"‚Ä¢ {asset_type}: {percentage:.1f}%\n"

        text += "\n**–ü–æ–∑–∏—Ü–∏–∏:**\n"
        for position in data['positions']:
            text += f"‚Ä¢ {position['name']} ({position['ticker']}): {position['value']:,.0f} ‚ÇΩ "
            text += f"({position['yield']:+,.0f} ‚ÇΩ, {position['percentage']:+.1f}%)\n"

        text += "\nüá∑üá∫ *–ê–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*"
        return text

    def _format_portfolio_context(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è AI"""
        context = "–î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–†–¢–§–ï–õ–Ø:\n\n"
        context += f"–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {data['total_value']:,.0f} ‚ÇΩ\n"
        context += f"–î–û–•–û–î–ù–û–°–¢–¨: {data['total_yield']:+,.0f} ‚ÇΩ ({data['yield_percentage']:+.1f}%)\n"
        context += f"–î–û–°–¢–£–ü–ù–´–ï –°–†–ï–î–°–¢–í–ê: {data['available_cash']:,.0f} ‚ÇΩ\n\n"

        context += "–¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò:\n"
        for position in data['positions']:
            context += f"- {position['name']} ({position['ticker']}): {position['value']:,.0f} ‚ÇΩ "
            context += f"(–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {position['percentage']:+.1f}%, —Å–µ–∫—Ç–æ—Ä: {position['sector']})\n"

        allocation = self._analyze_allocation(data['positions'])
        context += f"\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–û–í:\n"
        for asset_type, percentage in allocation.items():
            context += f"- {asset_type}: {percentage:.1f}%\n"

        sector_allocation = self._analyze_sectors(data['positions'])
        context += f"\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–ï–ö–¢–û–†–ê–ú:\n"
        for sector, percentage in sector_allocation.items():
            context += f"- {sector}: {percentage:.1f}%\n"

        context += "\n–¶–ï–õ–¨: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."
        return context

    async def _generate_management_recommendations(self, data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        analysis = self._analyze_portfolio_for_management(data)
        
        text = "ü§ñ **–ê–ù–ê–õ–ò–ó –î–õ–Ø –ê–í–¢–û–£–ü–†–ê–í–õ–ï–ù–ò–Ø**\n\n"
        
        text += "üìà **–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:**\n"
        text += f"‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {data['yield_percentage']:+.1f}%\n"
        text += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {data['available_cash']:,.0f} ‚ÇΩ\n"
        text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(data['positions'])}\n\n"

        text += "üí° **–í–´–Ø–í–õ–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**\n"
        for opportunity in analysis['opportunities']:
            text += f"‚Ä¢ {opportunity}\n"

        text += "\n‚ö° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
        for i, recommendation in enumerate(analysis['recommendations'], 1):
            text += f"{i}. {recommendation}\n"

        text += f"\nüíé **–û–ñ–ò–î–ê–ï–ú–´–ô –≠–§–§–ï–ö–¢:** {analysis['expected_improvement']}"
        text += "\n\nüá∑üá∫ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*"
        
        return text

    def _analyze_allocation(self, positions: List[Dict]) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤"""
        allocation = {}
        total_value = sum(pos['value'] for pos in positions)
        
        for position in positions:
            asset_type = "–ê–∫—Ü–∏–∏" if position['type'] == 'stock' else "–û–±–ª–∏–≥–∞—Ü–∏–∏"
            if asset_type not in allocation:
                allocation[asset_type] = 0
            allocation[asset_type] += float((position['value'] / total_value * 100))
                
        return allocation

    def _analyze_sectors(self, positions: List[Dict]) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"""
        sectors = {}
        total_value = sum(pos['value'] for pos in positions)
        
        for position in positions:
            sector = position['sector']
            if sector not in sectors:
                sectors[sector] = 0
            sectors[sector] += float((position['value'] / total_value * 100))
                
        return sectors

    def _analyze_portfolio_for_management(self, data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        opportunities = []
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        if data['yield_percentage'] < 10:
            opportunities.append("–ù–∏–∑–∫–∞—è –æ–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–ª—é –≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã—Ö –∞–∫—Ü–∏–π (YNDX, TCSG, GMKN)")

        # –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        sectors = self._analyze_sectors(data['positions'])
        if sectors.get('—Ñ–∏–Ω–∞–Ω—Å—ã', 0) > 40:
            opportunities.append("–í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º —Å–µ–∫—Ç–æ—Ä–µ")
            recommendations.append("–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤ IT –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å (POLY, PHOR)")

        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        if data['available_cash'] > data['total_value'] * 0.15:
            opportunities.append("–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞")
            recommendations.append("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å 70% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∞–∫—Ü–∏–∏ —Ä–æ—Å—Ç–∞")

        # –ê–Ω–∞–ª–∏–∑ –æ–±–ª–∏–≥–∞—Ü–∏–π
        allocation = self._analyze_allocation(data['positions'])
        if allocation.get('–û–±–ª–∏–≥–∞—Ü–∏–∏', 0) < 20:
            opportunities.append("–ù–∏–∑–∫–∞—è –¥–æ–ª—è –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤")
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –û–§–ó-26230 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

        expected_improvement = "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ 2-3% –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
        
        return {
            'opportunities': opportunities,
            'recommendations': recommendations,
            'expected_improvement': expected_improvement
        }

    def _get_fallback_analysis(self) -> str:
        """–ó–∞–ø–∞—Å–Ω–æ–π –∞–Ω–∞–ª–∏–∑"""
        return """üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)**

üíº **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** 185,000.00 ‚ÇΩ
üìà **–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** +15,600.00 ‚ÇΩ (+9.2%)
üí≥ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:** 32,000.00 ‚ÇΩ

**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**
‚Ä¢ –ê–∫—Ü–∏–∏: 78.4%
‚Ä¢ –û–±–ª–∏–≥–∞—Ü–∏–∏: 21.6%

ü§ñ *–î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Tinkoff API*
üá∑üá∫ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è: —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏*"""

    def _get_fallback_context(self) -> str:
        """–ó–∞–ø–∞—Å–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        return """–¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ):
- –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 185,000 ‚ÇΩ
- –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: +15,600 ‚ÇΩ (+9.2%)
- –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: 32,000 ‚ÇΩ

–ü–æ–∑–∏—Ü–∏–∏:
‚Ä¢ –°–±–µ—Ä–±–∞–Ω–∫ (SBER): 52,000 ‚ÇΩ (8.1%)
‚Ä¢ –ì–∞–∑–ø—Ä–æ–º (GAZP): 41,000 ‚ÇΩ (5.7%)
‚Ä¢ –õ—É–∫–æ–π–ª (LKOH): 38,000 ‚ÇΩ (13.8%)
‚Ä¢ –Ø–Ω–¥–µ–∫—Å (YNDX): 22,000 ‚ÇΩ (16.8%)
‚Ä¢ –û–§–ó-26238 (SU26238): 40,000 ‚ÇΩ (5.3%)

–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
- –ê–∫—Ü–∏–∏: 78.4%
- –û–±–ª–∏–≥–∞—Ü–∏–∏: 21.6%

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."""

    def _get_fallback_management_recommendations(self) -> str:
        """–ó–∞–ø–∞—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        return """ü§ñ **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ê–í–¢–û–£–ü–†–ê–í–õ–ï–ù–ò–Æ**

1. üìà **–£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–ª—é –∞–∫—Ü–∏–π –¥–æ 80%** (+1.6%)
   - –Ø–Ω–¥–µ–∫—Å (YNDX): 10,000 ‚ÇΩ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
   - TCS Group (TCSG): 8,000 ‚ÇΩ - —Ä–æ—Å—Ç IT-—Å–µ–∫—Ç–æ—Ä–∞

2. üõ°Ô∏è **–î–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏–∏ –¥–æ 20%** (-1.6%)
   - –û–§–ó-26230: 6,000 ‚ÇΩ - –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 8.5%

üí° **–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:** 32,000 ‚ÇΩ

üá∑üá∫ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*"""