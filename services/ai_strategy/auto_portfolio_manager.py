import logging
import aiohttp
import json
from decimal import Decimal
from typing import Dict, List, Optional
from datetime import datetime
import re

logger = logging.getLogger(__name__)


class AutoPortfolioManager:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º —á–µ—Ä–µ–∑ DeepSeek AI"""
    
    def __init__(self, config):
        self.config = config
        self.api_key = config.DEEPSEEK_API_KEY
        self.api_url = config.DEEPSEEK_API_URL
        self.russian_instruments = self._load_russian_instruments()
        
    def _load_russian_instruments(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return {
            "stocks": {
                "SBER": {"name": "–°–±–µ—Ä–±–∞–Ω–∫", "sector": "–§–∏–Ω–∞–Ω—Å—ã"},
                "VTBR": {"name": "–í–¢–ë", "sector": "–§–∏–Ω–∞–Ω—Å—ã"},
                "GAZP": {"name": "–ì–∞–∑–ø—Ä–æ–º", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
                "LKOH": {"name": "–õ—É–∫–æ–π–ª", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
                "ROSN": {"name": "–†–æ—Å–Ω–µ—Ñ—Ç—å", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
                "YNDX": {"name": "–Ø–Ω–¥–µ–∫—Å", "sector": "IT"},
                "TCSG": {"name": "TCS Group", "sector": "–§–∏–Ω–∞–Ω—Å—ã"},
                "GMKN": {"name": "–ì–ú–ö –ù–æ—Ä–Ω–∏–∫–µ–ª—å", "sector": "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è"},
                "POLY": {"name": "–ü–æ–ª–∏–º–µ—Ç–∞–ª–ª", "sector": "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è"},
                "MOEX": {"name": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞", "sector": "–§–∏–Ω–∞–Ω—Å—ã"},
                "AFKS": {"name": "–ê–§–ö –°–∏—Å—Ç–µ–º–∞", "sector": "–•–æ–ª–¥–∏–Ω–≥–∏"},
                "MTSS": {"name": "–ú–¢–°", "sector": "–¢–µ–ª–µ–∫–æ–º"},
                "MGNT": {"name": "–ú–∞–≥–Ω–∏—Ç", "sector": "–†–∏—Ç–µ–π–ª"},
                "RTKM": {"name": "–†–æ—Å—Ç–µ–ª–µ–∫–æ–º", "sector": "–¢–µ–ª–µ–∫–æ–º"},
                "HYDR": {"name": "–†—É—Å–ì–∏–¥—Ä–æ", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
                "FEES": {"name": "–§–°–ö –ï–≠–°", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
                "TRNFP": {"name": "–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å", "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"},
            },
            "bonds": {
                "SU26230": {"name": "–û–§–ó-26230", "type": "–≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–∏"},
                "SU26238": {"name": "–û–§–ó-26238", "type": "–≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–∏"},
                "SU26242": {"name": "–û–§–ó-26242", "type": "–≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–∏"},
                "RU000A105UY6": {"name": "–û–§–ó-29021", "type": "–≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–∏"},
                "RU000A106UY5": {"name": "–û–§–ó-29022", "type": "–≥–æ—Å. –æ–±–ª–∏–≥–∞—Ü–∏–∏"},
            }
        }
        
    async def generate_trading_decisions(self, portfolio_data: Dict, market_context: str = "") -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –æ—Ç AI
            ai_decisions = await self._get_ai_trading_decisions(portfolio_data, market_context)
            if ai_decisions:
                logger.info(f"AI generated {len(ai_decisions)} trading decisions")
                return ai_decisions
            else:
                logger.warning("AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è")
                return []
            
        except Exception as e:
            logger.error(f"Error generating trading decisions: {e}")
            return []
    
    async def _get_ai_trading_decisions(self, portfolio_data: Dict, market_context: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –æ—Ç AI"""
        try:
            analysis_prompt = self._create_analysis_prompt(portfolio_data, market_context)
            ai_response = await self._get_ai_trading_advice(analysis_prompt)
            
            if ai_response:
                decisions = self._parse_trading_decisions(ai_response, portfolio_data)
                if decisions:
                    return decisions
            
            return []
            
        except Exception as e:
            logger.error(f"Error in AI trading decisions: {e}")
            return []
    
    def _create_analysis_prompt(self, portfolio_data: Dict, market_context: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
        
        prompt = f"""–ê–ù–ê–õ–ò–ó –ü–û–†–¢–§–ï–õ–Ø –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –¢–û–†–ì–û–í–õ–ò:

–î–ê–ù–ù–´–ï –ü–û–†–¢–§–ï–õ–Ø:
{self._format_portfolio_for_ai(portfolio_data)}

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{self._format_available_instruments()}

–†–´–ù–û–ß–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:
{market_context if market_context else "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—ã–Ω–æ–∫ –∞–∫—Ü–∏–π –∏ –æ–±–ª–∏–≥–∞—Ü–∏–π"}

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏.

–ö–†–ò–¢–ï–†–ò–ò –ê–ù–ê–õ–ò–ó–ê:
1. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
2. –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∏—Å–∫–æ–º –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é  
3. –¢–µ–∫—É—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
4. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
5. –†—ã–Ω–æ—á–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π):
BUY/SELL [–¢–ò–ö–ï–†] [–°–£–ú–ú–ê_–í_–†–£–ë–õ–Ø–•] [–ö–†–ê–¢–ö–û–ï_–û–ë–û–°–ù–û–í–ê–ù–ò–ï] [–û–ñ–ò–î–ê–ï–ú–ê–Ø_–î–û–•–û–î–ù–û–°–¢–¨%]

–ü–†–ò–ú–ï–†–´:
BUY YNDX 15000 –†–û–°–¢_IT_–°–ï–ö–¢–û–†–ê_–ò_–í–´–°–û–ö–ê–Ø_–î–û–•–û–î–ù–û–°–¢–¨ 18.5
SELL GAZP 8000 –°–¢–ê–ì–ù–ê–¶–ò–Ø_–≠–ù–ï–†–ì–ï–¢–ò–ö–ò_–ò_–ù–ò–ó–ö–ê–Ø_–î–û–•–û–î–ù–û–°–¢–¨ 5.2
BUY SU26230 12000 –î–ò–í–ï–†–°–ò–§–ò–ö–ê–¶–ò–Ø_–ò_–ó–ê–©–ò–¢–ê_–ö–ê–ü–ò–¢–ê–õ–ê 8.5

–†–ï–®–ï–ù–ò–Ø:"""
        
        return prompt
    
    def _format_available_instruments(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        text = "–ê–ö–¶–ò–ò:\n"
        for ticker, info in self.russian_instruments["stocks"].items():
            text += f"- {ticker}: {info['name']} ({info['sector']})\n"
        
        text += "\n–û–ë–õ–ò–ì–ê–¶–ò–ò:\n"
        for ticker, info in self.russian_instruments["bonds"].items():
            text += f"- {ticker}: {info['name']}\n"
            
        return text
    
    async def _get_ai_trading_advice(self, prompt: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç DeepSeek AI"""
        if not self.api_key:
            logger.warning("DeepSeek API key not configured")
            return ""
            
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system", 
                    "content": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞. 

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è.

–ü–†–ê–í–ò–õ–ê:
1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
2. –ì–µ–Ω–µ—Ä–∏—Ä—É–π 3-5 —Ä–µ—à–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º
3. –°—É–º–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
4. –£—á–∏—Ç—ã–≤–∞–π –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å
5. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
6. –£–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å

–§–û–†–ú–ê–¢ –°–¢–†–û–ì–û:
ACTION TICKER AMOUNT RATIONALE EXPECTED_YIELD%

–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–∏–π."""
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 1000,
            "temperature": 0.3,
            "stream": False
        }
        
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                async with session.post(
                    f"{self.api_url}/chat/completions",
                    json=payload,
                    headers=headers
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']
                        logger.info(f"AI Response: {content}")
                        return content
                    else:
                        error_text = await response.text()
                        logger.error(f"AI API error: {response.status} - {error_text}")
                        return ""
        except Exception as e:
            logger.error(f"AI request failed: {e}")
            return ""
    
    def _format_portfolio_for_ai(self, portfolio: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è AI"""
        text = f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {portfolio['total_value']:,.0f} ‚ÇΩ\n"
        text += f"üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio['total_yield']:+,.0f} ‚ÇΩ ({portfolio['yield_percentage']:+.1f}%)\n"
        text += f"üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {portfolio['available_cash']:,.0f} ‚ÇΩ\n\n"
        
        text += "üìä –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
        for position in portfolio['positions']:
            text += f"- {position['name']} ({position['ticker']}): {position['value']:,.0f} ‚ÇΩ "
            text += f"(–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {position['percentage']:+.1f}%)\n"
        
        allocation = self._calculate_allocation(portfolio['positions'])
        text += f"\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n"
        for asset_type, percentage in allocation.items():
            text += f"- {asset_type}: {percentage:.1f}%\n"
            
        sectors = self._analyze_sectors(portfolio['positions'])
        text += f"\nüè¢ –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n"
        for sector, percentage in sectors.items():
            text += f"- {sector}: {percentage:.1f}%\n"
            
        return text
    
    def _parse_trading_decisions(self, ai_response: str, portfolio_data: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏–∑ AI –æ—Ç–≤–µ—Ç–∞"""
        decisions = []
        lines = ai_response.split('\n')
        
        for line in lines:
            line = line.strip()
            if not line or line.startswith('#') or '–ü–†–ò–ú–ï–†' in line.upper():
                continue
                
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
            decision = self._parse_decision_line(line, portfolio_data)
            if decision:
                decisions.append(decision)
        
        logger.info(f"Parsed {len(decisions)} decisions from AI response")
        return decisions
    
    def _parse_decision_line(self, line: str, portfolio_data: Dict) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å —Ä–µ—à–µ–Ω–∏–µ–º"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            parts = line.upper().split()
            if len(parts) < 4:
                return None
                
            # –ò—â–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            action = None
            if 'BUY' in parts[0]:
                action = 'BUY'
            elif 'SELL' in parts[0]:
                action = 'SELL'
            else:
                return None
            
            # –ò—â–µ–º —Ç–∏–∫–µ—Ä (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è)
            ticker = parts[1] if len(parts[1]) <= 10 else None
            if not ticker or ticker not in self._get_all_tickers():
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ä –≤ —Å—Ç—Ä–æ–∫–µ
                for part in parts[2:6]:
                    if part in self._get_all_tickers():
                        ticker = part
                        break
            
            if not ticker:
                return None
            
            # –ò—â–µ–º —Å—É–º–º—É
            amount = self._extract_amount(line, portfolio_data['available_cash'])
            if amount <= 0:
                return None
            
            # –ò—â–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            expected_yield = self._extract_yield(line)
            
            # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ - –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
            rationale_start = 2
            for i, part in enumerate(parts[2:], 2):
                if part.replace('‚ÇΩ', '').replace(',', '').replace('.', '').isdigit():
                    rationale_start = i + 1
                    break
            
            rationale_parts = parts[rationale_start:]
            rationale = ' '.join(rationale_parts)
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
            rationale = re.sub(r'\d+\.?\d*%', '', rationale).strip()
            
            if not rationale:
                rationale = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"
            
            return {
                'action': action,
                'ticker': ticker,
                'amount': amount,
                'rationale': rationale,
                'expected_yield': expected_yield,
                'source': 'ai',
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error parsing decision line: {line} - {e}")
            return None
    
    def _get_all_tickers(self) -> set:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã"""
        tickers = set(self.russian_instruments["stocks"].keys())
        tickers.update(self.russian_instruments["bonds"].keys())
        return tickers
    
    def _extract_amount(self, text: str, available_cash: Decimal) -> Decimal:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ò—â–µ–º —á–∏—Å–ª–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤–∞–ª—é—Ç—ã
            matches = re.findall(r'(\d+[,\.]?\d*)\s*‚ÇΩ?', text)
            for match in matches:
                amount_str = match.replace(',', '').replace('.', '')
                amount = Decimal(amount_str)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ —Ä–∞–∑—É–º–Ω–∞—è (–Ω–µ –±–æ–ª—å—à–µ 80% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤)
                if amount > 0 and amount <= available_cash * Decimal('0.8'):
                    return amount
        except:
            pass
        
        return Decimal('0')
    
    def _extract_yield(self, text: str) -> float:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            matches = re.findall(r'(\d+[,\.]?\d*)%', text)
            if matches:
                yield_value = float(matches[0].replace(',', '.'))
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                if -50 <= yield_value <= 100:
                    return yield_value
        except:
            pass
        
        return 0.0
    
    def _calculate_allocation(self, positions: List[Dict]) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤"""
        allocation = {}
        total_value = sum(pos['value'] for pos in positions)
        
        if total_value == 0:
            return {}
            
        for position in positions:
            asset_type = "–ê–∫—Ü–∏–∏" if position['type'] == 'stock' else "–û–±–ª–∏–≥–∞—Ü–∏–∏"
            if asset_type not in allocation:
                allocation[asset_type] = 0
            allocation[asset_type] += float((position['value'] / total_value * 100))
                
        return allocation
    
    def _analyze_sectors(self, positions: List[Dict]) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"""
        sectors = {}
        total_value = sum(pos['value'] for pos in positions)
        
        if total_value == 0:
            return {}
            
        for position in positions:
            sector = position.get('sector', '–î—Ä—É–≥–æ–µ')
            if sector not in sectors:
                sectors[sector] = 0
            sectors[sector] += float((position['value'] / total_value * 100))
                
        return sectors