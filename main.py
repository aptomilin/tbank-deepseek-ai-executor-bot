#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Investment Advisor Application
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Tinkoff Invest API —Å Telegram –±–æ—Ç–æ–º –∏ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
"""

import logging
import os
from app.loader import load_config
from app.bot.investment_bot import InvestmentTelegramBot


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)

    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s'
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(
        filename=os.path.join(log_dir, 'app.log'),
        encoding='utf-8'
    )
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()

    logger = logging.getLogger(__name__)
    logger.info("üöÄ Starting Investment Advisor Application...")

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        logger.info("‚úÖ Configuration loaded")

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = InvestmentTelegramBot(config)

        logger.info("‚úÖ Bot initialized")
        logger.info("ü§ñ Starting Telegram bot...")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot.run()

    except Exception as e:
        logger.error(f"‚ùå Application error: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    main()